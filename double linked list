#include <iostream>
using namespace std;

struct node
{
    int data;
    node *next;
    node *prev;

    node(int data, node *prev, node *next)
    { // constructor
        this->data = data;
        this->next = next;
        this->prev = prev;
    }
};
struct doubleList
{
    node *start, *end;
    int size;
    doubleList()
    {
        start = NULL;
        end = NULL;
        size = 0;
    }
    void insertFirst(int data);
    void insertAfter(int index, int data);
    void insertLast(int data);
    void deleteFirst();
    void deleteAfter(int index);
    void deleteLast();
    void deleteAt(int index);
    void printAll();
};

void doubleList::printAll()
{
    node *temp = start;
    while (temp != NULL)
    {
        cout << temp->data;
        temp = temp->next;
        if (temp != NULL)
        {
            cout << "<->";
        }
        if (temp == NULL)
        {
            cout << endl << "Size: " << size;
        }
    }
    cout << "\n";
}

void doubleList::insertAfter(int index, int data)
{
    if (index < 1 || index > size)
    {
        cout << "Index out of bound\n";
        return;
    }
    node *temp = start;
    for (int i = 1; i < index; i++)
    {
        temp = temp->next;
    }
    node *newNode = new node(data, temp, temp->next);
    if (temp->next != NULL)
    {
        temp->next->prev = newNode;
    }
    temp->next = newNode;
    size++;
}

void doubleList::insertLast(int data)
{
    node *last = new node(data, NULL, NULL);
    if (start == NULL)
    {
        start = last;
        end = last;
    }
    else
    {
        last->prev = end;
        end->next = last;
        end = last;
    }
    size++;
}

void doubleList::insertFirst(int data)
{
    node *first = new node(data, NULL, NULL);
    if (start == NULL)
    {
        start = first;
        end = first;
    }
    else
    {
        first->next = start;
        start->prev = first;
        start = first;
    }
    size++;
}

void doubleList::deleteFirst()
{
    if (start == NULL)
        return;
    node *temp = start;
    start = start->next;
    delete temp;
    size--;

    if (size == 0)
    {
        start = NULL;
        end = NULL;
    }
}

void doubleList::deleteAfter(int index)
{
    if (index < 1 || index > size)
    {
        cout << "Index out of bound\n";
        return;
    }
    node *temp = start;
    for (int i = 1; i < index; i++)
    {
        temp = temp->next;
    }
    node *next = temp->next;
    temp->next = next->next;
    if (next->next != NULL)
    {
        next->next->prev = temp;
    }
    delete next;
    size--;
}

void doubleList::deleteLast()
{
    if (end == NULL)
        return;
    if (size == 1)
        return deleteFirst();
    node *temp = end;
    end = end->prev;
    end->next = NULL;

    delete temp;
    size--;
}

void doubleList::deleteAt(int index)
{
    if (index < 1 || index > size)
    {
        cout << "Index out of bound\n";
        return;
    }
    if (index == 1)
        return deleteFirst();
    if (index == size)
        return deleteLast();
    node *temp = start;
    for (int i = 1; i < index; i++)
    {
        temp = temp->next;
    }
    temp->prev->next = temp->next;
    temp->next->prev = temp->prev;
    temp->next = NULL;
    temp->prev = NULL;
    delete temp;
    size--;
}

int main()
{
    doubleList *head = new doubleList();
    head->insertFirst(20);
    head->insertFirst(10);
    head->insertLast(80);
    head->insertAfter(1, 30);
    head->printAll();
    head->deleteLast();
    head->printAll();
    head->deleteAt(2);
    head->printAll();

    return 0;
}
